trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  SCANNER_HOME: $(System.DefaultWorkingDirectory)/sonar-scanner
  SONAR_HOST_URL: 'http://127.0.0.1:43269'
  DOCKER_IMAGE_NAME: 'imagen_app'
  DOCKER_TAG: 'leonel1521/app_final'

stages:
- stage: Checkout
  jobs:
  - job: Checkout
    steps:
    - task: GitCheckout@1
      inputs:
        repository: 'https://github.com/tefkat1521/PracticaJavascript.git'
        branch: 'main'

- stage: SonarAnalysis
  jobs:
  - job: SonarAnalysis
    steps:
    - task: SonarQubePrepare@4
      inputs:
        SonarQube: 'sonarqube'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'projectV3'
        cliSources: '.'
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true
    - script: |
        python -m pip install --upgrade pip
        python -m pip install sonar-scanner
      displayName: 'Install Sonar Scanner'
    - script: |
        $(SCANNER_HOME)/bin/sonar-scanner \
        -Dsonar.projectKey=projectV3 \
        -Dsonar.host.url=$(SONAR_HOST_URL) \
        -Dsonar.login=$(SONARQUBE_ENDPOINT_USERNAME) \
        -Dsonar.password=$(SONARQUBE_ENDPOINT_PASSWORD)
      env:
        SONARQUBE_ENDPOINT_USERNAME: $(SONARQUBE_ENDPOINT_USERNAME)
        SONARQUBE_ENDPOINT_PASSWORD: $(SONARQUBE_ENDPOINT_PASSWORD)
      displayName: 'Run Sonar Scanner'

- stage: CreateDockerfile
  jobs:
  - job: CreateDockerfile
    steps:
    - script: |
        rm -f Dockerfile
        echo 'FROM httpd:2.4' > Dockerfile
        echo 'COPY . /usr/local/apache2/htdocs/' >> Dockerfile
        echo 'EXPOSE 80' >> Dockerfile
      displayName: 'Create Dockerfile'

- stage: DockerBuild
  jobs:
  - job: DockerBuild
    steps:
    - task: Docker@2
      inputs:
        command: 'build'
        dockerfile: '**/Dockerfile'
        tags: $(DOCKER_IMAGE_NAME)

- stage: DockerLogin
  jobs:
  - job: DockerLogin
    steps:
    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: 'DockerHub'
        dockerRegistryEndpoint: 'DockerHub'
        username: 'leonel1521'
        password: '$(DOCKER_PASSWORD)'

- stage: DockerPush
  jobs:
  - job: DockerPush
    steps:
    - task: Docker@2
      inputs:
        command: 'tag'
        imageName: $(DOCKER_IMAGE_NAME)
        tag: $(DOCKER_TAG)
    - task: Docker@2
      inputs:
        command: 'push'
        imageName: $(DOCKER_TAG)
